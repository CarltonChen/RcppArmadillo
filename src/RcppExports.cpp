// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/RcppArmadillo.h"
#include <Rcpp.h>

using namespace Rcpp;

// armadillo_version
IntegerVector armadillo_version(bool single);
RcppExport SEXP _RcppArmadillo_armadillo_version(SEXP singleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type single(singleSEXP);
    rcpp_result_gen = Rcpp::wrap(armadillo_version(single));
    return rcpp_result_gen;
END_RCPP
}
// armadillo_set_seed_random
void armadillo_set_seed_random();
RcppExport SEXP _RcppArmadillo_armadillo_set_seed_random() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    armadillo_set_seed_random();
    return R_NilValue;
END_RCPP
}
// armadillo_set_seed
void armadillo_set_seed(unsigned int val);
RcppExport SEXP _RcppArmadillo_armadillo_set_seed(SEXP valSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type val(valSEXP);
    armadillo_set_seed(val);
    return R_NilValue;
END_RCPP
}
// fastLm_impl
List fastLm_impl(const arma::mat& X, const arma::colvec& y);
RcppExport SEXP _RcppArmadillo_fastLm_impl(SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(fastLm_impl(X, y));
    return rcpp_result_gen;
END_RCPP
}
// veccany_as_v_test
arma::vec veccany_as_v_test(arma::vec v);
RcppExport SEXP _RcppArmadillo_veccany_as_v_test(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(veccany_as_v_test(v));
    return rcpp_result_gen;
END_RCPP
}
// vecrany_as_v_test
arma::rowvec vecrany_as_v_test(arma::rowvec v);
RcppExport SEXP _RcppArmadillo_vecrany_as_v_test(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(vecrany_as_v_test(v));
    return rcpp_result_gen;
END_RCPP
}
// wrap_
List wrap_();
RcppExport SEXP _RcppArmadillo_wrap_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(wrap_());
    return rcpp_result_gen;
END_RCPP
}
// wrapGlue_
List wrapGlue_();
RcppExport SEXP _RcppArmadillo_wrapGlue_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(wrapGlue_());
    return rcpp_result_gen;
END_RCPP
}
// wrapOp_
List wrapOp_();
RcppExport SEXP _RcppArmadillo_wrapOp_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(wrapOp_());
    return rcpp_result_gen;
END_RCPP
}
// asMat_
List asMat_(List input);
RcppExport SEXP _RcppArmadillo_asMat_(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(asMat_(input));
    return rcpp_result_gen;
END_RCPP
}
// asCol_
List asCol_(List input);
RcppExport SEXP _RcppArmadillo_asCol_(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(asCol_(input));
    return rcpp_result_gen;
END_RCPP
}
// asRow_
List asRow_(List input);
RcppExport SEXP _RcppArmadillo_asRow_(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(asRow_(input));
    return rcpp_result_gen;
END_RCPP
}
// cxMat_
List cxMat_();
RcppExport SEXP _RcppArmadillo_cxMat_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cxMat_());
    return rcpp_result_gen;
END_RCPP
}
// mtOp_
ComplexMatrix mtOp_();
RcppExport SEXP _RcppArmadillo_mtOp_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(mtOp_());
    return rcpp_result_gen;
END_RCPP
}
// mtGlue_
NumericMatrix mtGlue_();
RcppExport SEXP _RcppArmadillo_mtGlue_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(mtGlue_());
    return rcpp_result_gen;
END_RCPP
}
// sugar_
NumericMatrix sugar_(NumericVector xx);
RcppExport SEXP _RcppArmadillo_sugar_(SEXP xxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP);
    rcpp_result_gen = Rcpp::wrap(sugar_(xx));
    return rcpp_result_gen;
END_RCPP
}
// sugarCplx_
ComplexMatrix sugarCplx_(ComplexVector xx);
RcppExport SEXP _RcppArmadillo_sugarCplx_(SEXP xxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector >::type xx(xxSEXP);
    rcpp_result_gen = Rcpp::wrap(sugarCplx_(xx));
    return rcpp_result_gen;
END_RCPP
}
// sugarCtor_
List sugarCtor_(NumericVector xx);
RcppExport SEXP _RcppArmadillo_sugarCtor_(SEXP xxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP);
    rcpp_result_gen = Rcpp::wrap(sugarCtor_(xx));
    return rcpp_result_gen;
END_RCPP
}
// sugarMatrixCtor_
List sugarMatrixCtor_(NumericVector xx);
RcppExport SEXP _RcppArmadillo_sugarMatrixCtor_(SEXP xxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP);
    rcpp_result_gen = Rcpp::wrap(sugarMatrixCtor_(xx));
    return rcpp_result_gen;
END_RCPP
}
// mat_plain
int mat_plain(arma::mat x);
RcppExport SEXP _RcppArmadillo_mat_plain(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_plain(x));
    return rcpp_result_gen;
END_RCPP
}
// mat_const
int mat_const(const arma::mat x);
RcppExport SEXP _RcppArmadillo_mat_const(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_const(x));
    return rcpp_result_gen;
END_RCPP
}
// mat_ref
int mat_ref(arma::mat& x);
RcppExport SEXP _RcppArmadillo_mat_ref(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_ref(x));
    return rcpp_result_gen;
END_RCPP
}
// mat_const_ref
int mat_const_ref(const arma::mat& x);
RcppExport SEXP _RcppArmadillo_mat_const_ref(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_const_ref(x));
    return rcpp_result_gen;
END_RCPP
}
// vec_plain
int vec_plain(arma::vec x);
RcppExport SEXP _RcppArmadillo_vec_plain(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_plain(x));
    return rcpp_result_gen;
END_RCPP
}
// vec_const
int vec_const(const arma::vec x);
RcppExport SEXP _RcppArmadillo_vec_const(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_const(x));
    return rcpp_result_gen;
END_RCPP
}
// vec_ref
int vec_ref(arma::vec& x);
RcppExport SEXP _RcppArmadillo_vec_ref(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_ref(x));
    return rcpp_result_gen;
END_RCPP
}
// vec_const_ref
int vec_const_ref(const arma::vec& x);
RcppExport SEXP _RcppArmadillo_vec_const_ref(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_const_ref(x));
    return rcpp_result_gen;
END_RCPP
}
// cx_mat_plain
int cx_mat_plain(arma::cx_mat x);
RcppExport SEXP _RcppArmadillo_cx_mat_plain(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cx_mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cx_mat_plain(x));
    return rcpp_result_gen;
END_RCPP
}
// cx_mat_const
int cx_mat_const(const arma::cx_mat x);
RcppExport SEXP _RcppArmadillo_cx_mat_const(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cx_mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cx_mat_const(x));
    return rcpp_result_gen;
END_RCPP
}
// cx_mat_ref
int cx_mat_ref(arma::cx_mat& x);
RcppExport SEXP _RcppArmadillo_cx_mat_ref(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cx_mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cx_mat_ref(x));
    return rcpp_result_gen;
END_RCPP
}
// cx_mat_const_ref
int cx_mat_const_ref(const arma::cx_mat& x);
RcppExport SEXP _RcppArmadillo_cx_mat_const_ref(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cx_mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cx_mat_const_ref(x));
    return rcpp_result_gen;
END_RCPP
}
// uvec_test
arma::uvec uvec_test(arma::uvec v);
RcppExport SEXP _RcppArmadillo_uvec_test(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(uvec_test(v));
    return rcpp_result_gen;
END_RCPP
}
// c_uvec_test
arma::uvec c_uvec_test(const arma::uvec v);
RcppExport SEXP _RcppArmadillo_c_uvec_test(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(c_uvec_test(v));
    return rcpp_result_gen;
END_RCPP
}
// r_uvec_test
arma::uvec r_uvec_test(arma::uvec& v);
RcppExport SEXP _RcppArmadillo_r_uvec_test(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(r_uvec_test(v));
    return rcpp_result_gen;
END_RCPP
}
// cr_uvec_test
arma::uvec cr_uvec_test(const arma::uvec& v);
RcppExport SEXP _RcppArmadillo_cr_uvec_test(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(cr_uvec_test(v));
    return rcpp_result_gen;
END_RCPP
}
// umat_test
arma::umat umat_test(arma::umat v);
RcppExport SEXP _RcppArmadillo_umat_test(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(umat_test(v));
    return rcpp_result_gen;
END_RCPP
}
// c_umat_test
arma::umat c_umat_test(const arma::umat v);
RcppExport SEXP _RcppArmadillo_c_umat_test(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::umat >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(c_umat_test(v));
    return rcpp_result_gen;
END_RCPP
}
// r_umat_test
arma::umat r_umat_test(arma::umat& v);
RcppExport SEXP _RcppArmadillo_r_umat_test(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(r_umat_test(v));
    return rcpp_result_gen;
END_RCPP
}
// cr_umat_test
arma::umat cr_umat_test(const arma::umat& v);
RcppExport SEXP _RcppArmadillo_cr_umat_test(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::umat& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(cr_umat_test(v));
    return rcpp_result_gen;
END_RCPP
}
// vecc_test
arma::vec vecc_test(arma::vec v);
RcppExport SEXP _RcppArmadillo_vecc_test(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(vecc_test(v));
    return rcpp_result_gen;
END_RCPP
}
// vecr_test
arma::rowvec vecr_test(arma::rowvec v);
RcppExport SEXP _RcppArmadillo_vecr_test(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(vecr_test(v));
    return rcpp_result_gen;
END_RCPP
}
// vecc_as_v_test
arma::vec vecc_as_v_test(arma::vec v);
RcppExport SEXP _RcppArmadillo_vecc_as_v_test(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(vecc_as_v_test(v));
    return rcpp_result_gen;
END_RCPP
}
// vecr_as_v_test
arma::rowvec vecr_as_v_test(arma::rowvec v);
RcppExport SEXP _RcppArmadillo_vecr_as_v_test(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(vecr_as_v_test(v));
    return rcpp_result_gen;
END_RCPP
}
// complexCppTests
List complexCppTests(const arma::mat& A, const arma::mat& B, const arma::cx_colvec& V, const arma::mat& S);
RcppExport SEXP _RcppArmadillo_complexCppTests(SEXP ASEXP, SEXP BSEXP, SEXP VSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::cx_colvec& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(complexCppTests(A, B, V, S));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppArmadillo_armadillo_version", (DL_FUNC) &_RcppArmadillo_armadillo_version, 1},
    {"_RcppArmadillo_armadillo_set_seed_random", (DL_FUNC) &_RcppArmadillo_armadillo_set_seed_random, 0},
    {"_RcppArmadillo_armadillo_set_seed", (DL_FUNC) &_RcppArmadillo_armadillo_set_seed, 1},
    {"_RcppArmadillo_fastLm_impl", (DL_FUNC) &_RcppArmadillo_fastLm_impl, 2},
    {"_RcppArmadillo_veccany_as_v_test", (DL_FUNC) &_RcppArmadillo_veccany_as_v_test, 1},
    {"_RcppArmadillo_vecrany_as_v_test", (DL_FUNC) &_RcppArmadillo_vecrany_as_v_test, 1},
    {"_RcppArmadillo_wrap_", (DL_FUNC) &_RcppArmadillo_wrap_, 0},
    {"_RcppArmadillo_wrapGlue_", (DL_FUNC) &_RcppArmadillo_wrapGlue_, 0},
    {"_RcppArmadillo_wrapOp_", (DL_FUNC) &_RcppArmadillo_wrapOp_, 0},
    {"_RcppArmadillo_asMat_", (DL_FUNC) &_RcppArmadillo_asMat_, 1},
    {"_RcppArmadillo_asCol_", (DL_FUNC) &_RcppArmadillo_asCol_, 1},
    {"_RcppArmadillo_asRow_", (DL_FUNC) &_RcppArmadillo_asRow_, 1},
    {"_RcppArmadillo_cxMat_", (DL_FUNC) &_RcppArmadillo_cxMat_, 0},
    {"_RcppArmadillo_mtOp_", (DL_FUNC) &_RcppArmadillo_mtOp_, 0},
    {"_RcppArmadillo_mtGlue_", (DL_FUNC) &_RcppArmadillo_mtGlue_, 0},
    {"_RcppArmadillo_sugar_", (DL_FUNC) &_RcppArmadillo_sugar_, 1},
    {"_RcppArmadillo_sugarCplx_", (DL_FUNC) &_RcppArmadillo_sugarCplx_, 1},
    {"_RcppArmadillo_sugarCtor_", (DL_FUNC) &_RcppArmadillo_sugarCtor_, 1},
    {"_RcppArmadillo_sugarMatrixCtor_", (DL_FUNC) &_RcppArmadillo_sugarMatrixCtor_, 1},
    {"_RcppArmadillo_mat_plain", (DL_FUNC) &_RcppArmadillo_mat_plain, 1},
    {"_RcppArmadillo_mat_const", (DL_FUNC) &_RcppArmadillo_mat_const, 1},
    {"_RcppArmadillo_mat_ref", (DL_FUNC) &_RcppArmadillo_mat_ref, 1},
    {"_RcppArmadillo_mat_const_ref", (DL_FUNC) &_RcppArmadillo_mat_const_ref, 1},
    {"_RcppArmadillo_vec_plain", (DL_FUNC) &_RcppArmadillo_vec_plain, 1},
    {"_RcppArmadillo_vec_const", (DL_FUNC) &_RcppArmadillo_vec_const, 1},
    {"_RcppArmadillo_vec_ref", (DL_FUNC) &_RcppArmadillo_vec_ref, 1},
    {"_RcppArmadillo_vec_const_ref", (DL_FUNC) &_RcppArmadillo_vec_const_ref, 1},
    {"_RcppArmadillo_cx_mat_plain", (DL_FUNC) &_RcppArmadillo_cx_mat_plain, 1},
    {"_RcppArmadillo_cx_mat_const", (DL_FUNC) &_RcppArmadillo_cx_mat_const, 1},
    {"_RcppArmadillo_cx_mat_ref", (DL_FUNC) &_RcppArmadillo_cx_mat_ref, 1},
    {"_RcppArmadillo_cx_mat_const_ref", (DL_FUNC) &_RcppArmadillo_cx_mat_const_ref, 1},
    {"_RcppArmadillo_uvec_test", (DL_FUNC) &_RcppArmadillo_uvec_test, 1},
    {"_RcppArmadillo_c_uvec_test", (DL_FUNC) &_RcppArmadillo_c_uvec_test, 1},
    {"_RcppArmadillo_r_uvec_test", (DL_FUNC) &_RcppArmadillo_r_uvec_test, 1},
    {"_RcppArmadillo_cr_uvec_test", (DL_FUNC) &_RcppArmadillo_cr_uvec_test, 1},
    {"_RcppArmadillo_umat_test", (DL_FUNC) &_RcppArmadillo_umat_test, 1},
    {"_RcppArmadillo_c_umat_test", (DL_FUNC) &_RcppArmadillo_c_umat_test, 1},
    {"_RcppArmadillo_r_umat_test", (DL_FUNC) &_RcppArmadillo_r_umat_test, 1},
    {"_RcppArmadillo_cr_umat_test", (DL_FUNC) &_RcppArmadillo_cr_umat_test, 1},
    {"_RcppArmadillo_vecc_test", (DL_FUNC) &_RcppArmadillo_vecc_test, 1},
    {"_RcppArmadillo_vecr_test", (DL_FUNC) &_RcppArmadillo_vecr_test, 1},
    {"_RcppArmadillo_vecc_as_v_test", (DL_FUNC) &_RcppArmadillo_vecc_as_v_test, 1},
    {"_RcppArmadillo_vecr_as_v_test", (DL_FUNC) &_RcppArmadillo_vecr_as_v_test, 1},
    {"_RcppArmadillo_complexCppTests", (DL_FUNC) &_RcppArmadillo_complexCppTests, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppArmadillo(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
